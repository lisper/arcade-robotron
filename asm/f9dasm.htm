<html>
<head>
<title>F9DASM</title>
</head>
<body>

<h1>F9DASM - 6800 / 6801 / 6803 / 6809 / 6309 Disassembler</h1>

<p align="right">Copyright (c) 2000 Arto Salmi<br>
Parts Copyright (c) 2001-2013 Hermann Seib<br>
Parts Copyright (c) 2013 Colin Bourassa</p>

<p>Based on Arto Salmi's C core that can be found somewhere on the 'net 
(last address known to me was
<a href="http://koti.mbnet.fi/~atjs/mc6809/Disassembler/dasm09.TGZ">
http://koti.mbnet.fi/~atjs/mc6809/Disassembler/dasm09.TGZ</a>),
I built a complete 6800/6809/6309 disassembler that can handle input files
in a variety of formats (Intel Hex / Motorola S09 / Flex9 Binary / Binary).
Since disassembly without guidance produces measly results, it can load
information files with quite a lot of directives, too.</p>

<p>I taylored the original to my taste by working through the source code; since 
F9DASM has reached a level of complexity that doesn't really lend itself to following the &quot;Use 
the Source, Luke!&quot; principle if you just want to disassemble a little 6809 
program, I've added this documentation. Have fun!</p>

<p align="right">Hermann Seib, 2010</p>

<h2>Syntax</h2>

<pre>f9dasm [-option]* [filename]</pre>

<h3>Command Line Options</h3>

<dl>
  <dt><b>-offset <i>address</i></b></dt>
  <dd>When disassembling a binary file, the default load address
	  is 0, since the binary file does not contain any clues; using this
	  option forces F9DASM to load the file at the specified address.</dd>
  <dt><b>-begin <i>address</i></b></dt>
  <dd>start disassembly address (<i>address</i> has to be given in hex format)<br>
      Default is the first referenced address in the file.</dd>
  <dt><b>-end <i>address</i></b></dt>
  <dd>end disassembly address (<i>address</i> has to be given in hex format)<br>
      Normally, this is defined either through the file size or its contents,
	  if it has an embedded END addres. This option allows to override the implicit
	  end address.</dd>
  <dt><b>-out <i>filename</i></b></dt>
  <dd>normally, f9dasm streams to standard output;
      this option forces it to write to the specified file instead.</dd>
  <dt><b>-noaddr</b></dt>
  <dd>suppresses the address field output (for clean assembler source files)</dd>
  <dt><b>-[no]hex</b></dt>
  <dd>disables or enables hex dump output (default is enabled).<br>
  While analyzing a file, the hex dump can be quite helpful; if you want to generate a
  clean assembler source file, you can disable it.</dd>
  <dt><b>-x</b></dt>
  <dt><b>-6309</b></dt>
  <dd>puts disassembler in 6309 mode (default is 6809).</dd>
  <dt><b>-6800</b></dt>
  <dd>puts disassembler in 6800 mode (default is 6809).</dd>
  <dt><b>-6801</b></dt>
  <dd>puts disassembler in 6801 / 6803 mode (default is 6809).</dd>
  <dt><b>-os9</b></dt>
  <dd>using this flag, the disassembler tries to convert swi2 to the
      corresponding OS/9 calls.</dd>
  <dt><b>-info <i>filename</i></b></dt>
  <dd><i>filename</i> gives an information file which contains additional
      hints for the disassembler. See the <b>Info File</b> section below.</dd>
  <dt><b>-cchar <i>char</i></b></dt>
  <dd><i>char</i> is the character to be used as comment delimiter.<br>
      Default is <b>*</b>, but not all assemblers can use this.<br>
	  <b>-cchar ;</b> would switch the comment delimiter to <b>;</b>, for example.</dd>
  <dt><b>-[no]flex</b></dt>
  <dd>using this flag, the disassembler uses the standardized FLEX labels for a defined
      range of addresses.</dd>
  <dt><b>-[no]conv</b></dt>
  <dd>using this flag, the disassembler outputs various "convenience" mnemonics 
      (like, for example, <b>CLRD</b> instead of <b>CLRA</b> followed by <b>CLRB</b>).<br>
      Default is on, but not all assemblers support this, so f9dasm can be forced
	  to stick to the base set of mnemonics.<br>
	  f9dasm's companion, <b>A09</b>, can of course handle them :-)</dd>
  <dt><b>-[no]dec</b></dt>
  <dd>can be used to output values in decimal notation (by default it's hexadecimal).</dd>
  <dt><b>-[no]comment</b></dt>
  <dd>can be used to enable or disable the output of comments (which can be provided
     in an info file, see below).<br>
	 Normally, comments are enabled.</dd>
  <dt><b>-[no]asc</b></dt>
  <dd>can be used to enable or disable output of the ASCII equivalent to code/data.<br>
  Default is to output ASCII</dd>
  <dt><b>-[no]fcc</b></dt>
  <dd>can be used to enable or disable the use of FCC to define data (instead of FCB or FDB)<br>
  Default is to use FCC</dd>
  <dt><b>-omitzero</b></dt>
  <dd>omit indexed-mode operands of $00 (default)</dd>
  <dt><b>-showzero</b></dt>
  <dd>do not omit indexed-mode operands of $00</dd>
  <dt><b>-help</b></dt>
  <dd>outputs an abbreviated version of this documentation.</dd>
</dl>

<h2>Info File</h2>
<p>Using the <b>-info <i>filename</i></b> option, you can give f9dasm additional
information about the layout of the processed file.</p>
<p>Normally, f9dasm will try to interpret everything as <i>code</i>;
it doesn't try to find out which areas contain code and which areas contain data,
or the format of the data. Using an info file, you can give it detailed instructions
how to process the file, add comments, insert additional stuff, and so on.</p>
<p>The info file is a simple text file, which contains one instruction per line.<br>
The instructions are case-insensitive.<br>
Addresses need to be given in <i>hexadecimal</i> notation.
Anything following an asterisk (<b>*</b>) is interpreted as a comment.</p>
<p>The info file can contain the following instructions:</p>

<dl>
  <dt><b>file <i>filename [baseaddr]</i></b></dt>
  <dd>This instructs f9dasm to load the given file at the given address.<br>
      Can be used instead of the command line parameter for the file name;
	  this can, for example, be useful if you want to generate a listing for a
	  bunch of small EPROMs that cover a continuous memory area.</dd>
  <dt><b>option <i>option [value]</i></b></dt>
  <dd><i>option</i> is one of the options listed above, just without the leading
      hyphen (-).</dd>
  <dt><b>code <i>addr[-addr]</i></b></dt>
  <dd>defines the given address (range) as containing code.</dd>
  <dt><b>data <i>addr[-addr]</i></b></dt>
  <dd>defines the given address (range) as containing data instead of code.<br>
      f9dasm will try to decipher ASCII strings in the area and display them
	  in the best possible format.</dd>
  <dt><b>bin[ary] <i>addr[-addr]</i></b></dt>
  <dt><b>char <i>addr[-addr]</i></b></dt>
  <dt><b>dec[imal] <i>addr[-addr]</i></b></dt>
  <dt><b>hex[adecimal] <i>addr[-addr]</i></b></dt>
  <dd>defines the output format used for the given data range.<br>
  This can also be used for constants in the <i>code</i> area; if, for example,
  f9dasm outputs the following line of code:<br>
  <pre>        LDA     #$D6                     *C115: 86 D6</pre>
  and you know pretty well that this is a binary bit mask, you can force it to
  display the data in a nicer format by giving the instruction
  <b>bin c116</b> (note that the address of the constant byte is given,
  <i>not</i> the address of the instruction!).
  This results in the modified output
  <pre>        LDA     #%11010110               *C115: 86 D6</pre>
  which may be easier to read (depending on your mental approach to assembler
  programming :-).<br>
  Note that <b>char</b> and <b>bin</b> can not be used for word areas (see below).</dd>
  <dt><b>word <i>addr[-addr]</i></b></dt>
  <dd>defines that the area consists of <i>words</i> (i.e., 2-byte entities,
      high byte first) instead of single bytes.</dd>
  <dt><b>const <i>addr[-addr]</i></b></dt>
  <dd>defines the data in the given range as <i>constants</i>.<br>
      Normally, if f9dasm can interpret the data as addresses, it will;
	  and if there's a label defined for this address, it will display
	  the label instead of the original value.</dd>
  <dt><b>unused <i>addr[-addr]</i></b></dt>
  <dd>defines the given address range as unused.<br>
      This can be useful if an area in the loaded file is known to be empty;
	  there's no need to put it into the generated assembler source.</dd>
  <dt><b>rmb <i>addr[-addr]</i></b></dt>
  <dd>defines the given address range as reserved, but not initialized to
      defined values.<br>
  <dt><b>label <i>addr name</i></b></dt>
  <dd>sets a label at the given address.<br>
      Note that f9dasm doesn't restrict the length of the label, nor does it enforce
	  a given range of characters (except for * and zero bytes - these terminate
	  the name). This may conflict with the assembler of your choice, so choose
	  the labels withg caution.</dd>
  <dt><b>used[label] <i>addr</i></b></dt>
  <dd>forces the given address used.<br>
	  Normally, f9dasm would only emit a label definition in the form of an
	  EQU statement if the label is really used in the code.</dd>
  <dt><b>unlabel <i>addr[-addr]</i></b></dt>
  <dd>removes defined labels in the given address range.<br>
      This is mainly useful if you use a set of info files (see the
	  <b>include</b> instruction below) and want to remove label definitions
	  from an earlier info file.</dd>
  <dt><b>insert <i>addr[-addr] text</i></b></dt>
  <dd>This instruction adds the given text to the text lines which
      are displayed before a given (range of) address(es).<br>
	  In contrast to a comment, there's no comment character written before
	  the text, which allows to insert any assembler statement or pseudo-op.</dd>
  <dt><b>comment <i>addr[-addr] text</i></b></dt>
  <dd>appends a comment to the lines displayed before a given address (range).</dd>
  <dt><b>lcomment <i>addr[-addr] text</i></b></dt>
  <dd>appends a <i>line</i> comment to the lines displayed before a given address
      (range).<br>
	  A line comment is displayed as a comment to the right of the instruction.<br>
	  If more than one line comment is given, they are displayed on separate lines,
	  but all to the right of the instruction.</dd>
  <dt><b>prepend <i>addr[-addr] text</i></b></dt>
  <dd>This instruction <i>prepends</i> the given text to the text lines which
      are displayed before a given (range of) address(es).<br>
	  This is mainly useful if you use a set of info files (see the
	  <b>include</b> instruction below) and want to add additional text from
	  a later info file before text lines from an earlier info file.</dd>
  <dt><b>prepcomm <i>addr[-addr] text</i></b></dt>
  <dd>Same as <b>prepend</b> (see above), but it prepends a <i>comment</i> 
      instead of a normal text line.</dd>
  <dt><b>preplcom[ment] <i>addr[-addr] text</i></b></dt>
  <dd>prepends a line comment to the lines displayed before a given address
      (range).</dd>
  <dt><b>uncomment <i>addr[-addr]</i></b></dt>
  <dd>removes <b>insert</b> and <b>comment</b> lines from the given address range.<br>
      This is mainly useful if you use a set of info files (see the
	  <b>include</b> instruction below) and want to remove comments
	  from an earlier info file so that you can replace them.</dd>
  <dt><b>unlcomment <i>addr[-addr]</i></b></dt>
  <dd>removes line comments from the given address range.<br>
      This is mainly useful if you use a set of info files (see the
	  <b>include</b> instruction below) and want to remove line 
	  comments from an earlier info file.</dd>
  <dt><b>include <i>filename</i></b></dt>
  <dd>includes the given info file.</dd>
  <dt><b>setdp <i>dp-content</i></b></dt>
  <dd>uses the specified direct page (if the specified processor can 
      do that - 6800 implicitly uses Direct Page 0).<br>
      Only the last <b>setdp</b> statement is used. While it would be theoretically
	  possible to use multiple SETDP statements in a single assembler source,
	  f9dasm doesn't provide this capability.</dd>
  <dt><b>rel[ative] <i>addr[-addr] baseaddr</i></b></dt>
  <dd>This can be used to make instructions with indexed addressing easier
      to read.</dd>
  <dt><b>unrel[ative] <i>addr[-addr]</i></b></dt>
  <dd>cancels the effect of <b>relative</b> instructions.</dd> 
  <dt><b>remap <i>addr[-addr] offset</i></b></dt>
  <dd>This is a tricky instruction that only makes sense in very special
      situations; imagine, for example, that you already have an elaborate
	  info file for a specific EPROM - and then you get another EPROM that
	  contains <i>nearly</i> the same stuff, just with one or two instructions
	  added or missing.<br>
	  You could, of course, adapt all instructions in your info file to the new
	  address layout.<br>
	  Would you? I wouldn't.<br>
	  In this case, it's easier to prepend a <b>remap</b> instruction that tells
	  f9dasm to "shift" the following addresses in the info file some bytes.</dd>
  <dt><b>end</b></dt>
  <dd>Terminates processing of this info file at once.</dd>

</dl>

</body>
</html>